@{
    ViewData["Title"] = "Dashboard";
}

<div class="">
    @if (User.Identity.IsAuthenticated)
    {
        @* <h5>Welcome @ViewData["FullName"] </h5> *@
        <div >
            <div class="mt-5">
                <div class="d-flex justify-content-md-evenly ">

                    <div class="card" style="width: 18rem; border-radius: 15px;">
                        <div class="card-body" style="  border-radius: 15px;">
                            <h5 class="card-title">Balance</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Your current balance is </h6>
                            <p id="Balance" class="card-text">@ViewData["Balance"]</p>

                            <button id="increaseBalanceButton" class="btn text-white card-link" data-toggle="modal" data-target="#increaseBalanceModal"
                                    style="background-color: #013E50;">
                              
                                 
                                Increase Balance
                            </button>
                        </div>
                    </div>

                    @* <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">Balance</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Your current balance is </h6>
                            <p id="Balance" class="card-text">@ViewData["Balance"]</p>

                            <button id="increaseBalanceButton" class="btn btn-primary card-link" data-toggle="modal" data-target="#increaseBalanceModal">
                                Increase Balance
                            </button>
                        </div>
                    </div>

                    <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">Balance</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Your current balance is </h6>
                            <p id="Balance" class="card-text">@ViewData["Balance"]</p>

                            <button id="increaseBalanceButton" class="btn btn-primary card-link" data-toggle="modal" data-target="#increaseBalanceModal">
                                Increase Balance
                            </button>
                        </div>
                    </div> *@

                </div>
            </div>

        </div>
      

        <div>
          @*   <h5 id="Balance">@ViewData["Balance"]</h5>
            <button id="increaseBalanceButton" class="btn btn-primary" data-toggle="modal" data-target="#increaseBalanceModal">
                Increase Balance
            </button>
 *@
            <div class="modal fade" id="increaseBalanceModal" tabindex="-1" role="dialog" aria-labelledby="increaseBalanceModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="increaseBalanceModalLabel">Increase Balance</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>

                        <div class="modal-body">
                            <div id="increaseBalanceContainer">
                                <label for="amountInput" style="text-align: left;">Enter Amount:</label>
                                <input type="number" class="form-control" id="amountInput" placeholder="Enter amount" required />
                                <div id="invalidAmountMessage" style="color: red; text-align: left; display: none;"></div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button id="cancelButton" type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                            <button id="submitIncreaseBalance" class="btn" style="background-color: #013E50; color:white;">Submit</button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="expensePartialContainer"></div>
        </div>
       
       
           
        <div class="charts-container" style=" display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
            margin-bottom: 20px;">
            <div class="chart-container" style="width:500px; height:400px; margin: 50px;">
                <h5 class="text-center" style="color:#012A36">Number of Expenses by Category</h5>
                <canvas id="numberOfExpensesByCategory" style="width:100%; height:100%;"></canvas>
            </div>
            <div class="chart-container" style="width:400px; height:300px; margin: 50px">
                <h5 class="text-center" style="color:#012A36">Cost Of Expenses By Category</h5>
                <canvas id="costOfExpensesByCategory" style="width:100%; height:100%;"></canvas>
            </div>
            <div class="chart-container" style="width:400px; height:300px; margin: 50px">
                <h5 class="text-center" style="color:#012A36">Recent Week Summary</h5>
                <canvas id="expensesByWeek" style="width:100%; height:100%;"></canvas>
            </div>



        </div>
    }
    else
    {
        <p>Please log in to view your profile settings and manage your expenses.</p>
    }
</div>

@section scripts {

    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        console.log("ViewData Title: ", "@ViewData["Date"]");


        $(document).ready(function () {
            $("#loadExpensePartial").click(function () {
                console.log("Load Expense button clicked");
               
            });


            $("#increaseBalanceButton").click(function () {
                $("#increaseBalanceContainer").show();
            });

            $("#submitIncreaseBalance").click(function () {
                var amount = parseFloat($("#amountInput").val());

                if (!isNaN(amount) && amount > 0) {
                    $.post('@Url.Action("IncreaseBalance")', { amount: amount }, function () {
                        // Update the balance dynamically
                        updateBalance();
                        // Clear the input field
                        $("#amountInput").val('');
                        // Hide the invalid amount message if shown
                        $("#invalidAmountMessage").hide();
                        // Close the modal
                        $("#cancelButton").click();
                        

                    });
                } else {
                    // Provide user feedback for invalid input on the page
                    $("#invalidAmountMessage").text("Please enter a valid positive amount.").show();
                }
            });

            function updateBalance() {
                console.log('update call');
                // Retrieve the updated balance from the server and update the UI
                $.get('@Url.Action("Index", "Home")', function (data) {
                    $("#Balance").html($(data).find("#Balance").html());
                  
                });
            }
            var numberOfExpensesByCategory = @Html.Raw(Json.Serialize(ViewBag.numberOfExpensesByCategory)) || [];
            var categoryLabels = numberOfExpensesByCategory.map(item => item.category);
            var CategoryCount = numberOfExpensesByCategory.map(item => item.count);
        
            var categoryCtx = document.getElementById('numberOfExpensesByCategory').getContext('2d');
            var catChart = new Chart(categoryCtx, {
                type: 'doughnut',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Number Of Expenses By Category',
                        data: CategoryCount,
                        backgroundColor: [
                            'rgb(1, 42, 54)',
                            'rgb(126, 82, 160)',
                            'rgb(210, 149, 191)',
                            'rgb(97, 93, 172)',
                            'rgb(153, 102, 255)',
                            'rgb(255, 159, 6)'
                        ],
                       
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });

            var costOfExpensesByCategory = @Html.Raw(Json.Serialize(ViewBag.costOfExpensesByCategory)) || [];
            //var categoryLabels = costOfExpensesByCategory.map(item => item.category);
            var categoryAmounts = costOfExpensesByCategory.map(item => item.amount);
            var costCtx = document.getElementById('costOfExpensesByCategory').getContext('2d');
            var costChart = new Chart(costCtx, {
                type: 'bar',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Cost Of Expenses By Category',
                        data: categoryAmounts,
                        backgroundColor: [
                            'rgb(1, 42, 54)',
                            'rgb(126, 82, 160)',
                            'rgb(210, 149, 191)',
                            'rgb(97, 93, 172)',
                            'rgb(153, 102, 255)',
                            'rgb(255, 159, 6)'
                        ],
                        
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });

            var expensesByWeek = @Html.Raw(Json.Serialize(ViewBag.expensesByWeek)) || [];
            var weekLabels = @Html.Raw(Json.Serialize(ViewBag.weekLabels)) || [];


            console.log(expensesByWeek);
            console.log(weekLabels);


            expensesByWeek.sort((a, b) => a.week - b.week);

         

            var weekAmounts = expensesByWeek.map(item => item.amount);

            var weekCtx = document.getElementById('expensesByWeek').getContext('2d');
            var weekChart = new Chart(weekCtx, {
                type: 'line',
                data: {
                    labels: weekLabels,
                    datasets: [{
                        label: 'Expenses By Week',
                        data: weekAmounts,
                        backgroundColor: [
                            'rgb(1, 42, 54)',
                            'rgb(126, 82, 160)',
                            'rgb(210, 149, 191)',
                            'rgb(97, 93, 172)',
                            'rgb(153, 102, 255)',
                            'rgb(255, 159, 6)'
                        ],
                       
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });
            // Rest of your chart rendering code...
            
        });
    </script>
}
