@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    @if (User.Identity.IsAuthenticated)
    {
        <h5>Welcome @ViewData["FullName"] </h5>
        <div>
            <h5 id="Balance">@ViewData["Balance"]</h5>
            <button id="increaseBalanceButton" class="btn btn-primary">Increase Balance</button>

            <div id="increaseBalanceContainer" style="display: none;">
                <input type="number" id="amountInput" placeholder="Enter amount" />
                <button id="submitIncreaseBalance" class="btn btn-success">Submit</button>
                <div id="invalidAmountMessage" style="color: red; display: none;"></div>
            </div>

            <div id="expensePartialContainer"></div>
        </div>

        <div class="charts-container" style=" display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-top: 20px;
            margin-bottom: 20px;">
            <div class="chart-container" style="width:400px; height:300px; margin: 50px">
                <h5>Number of Expenses by Category</h5>
                <canvas id="numberOfExpensesByCategory" style="width:100%; height:100%;"></canvas>
            </div>
            <div class="chart-container" style="width:400px; height:300px; margin: 50px">
                <h5>Cost Of Expenses By Category</h5>
                <canvas id="costOfExpensesByCategory" style="width:100%; height:100%;"></canvas>
            </div>
            <div class="chart-container" style="width:400px; height:300px; margin: 50px">
                <h5>Last Four Week expense</h5>
                <canvas id="expensesByWeek" style="width:100%; height:100%;"></canvas>
            </div>



        </div>
    }
    else
    {
        <p>Please log in to view your profile settings and manage your expenses.</p>
    }
</div>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function () {
            $("#increaseBalanceButton").click(function () {
                console.log("Increase Balance button clicked");
                $("#increaseBalanceContainer").show();
            });

            $("#submitIncreaseBalance").click(function () {
                console.log("Submit Increase Balance button clicked");
                var amount = parseFloat($("#amountInput").val());

                if (!isNaN(amount) && amount > 0) {
                    console.log("Valid amount: " + amount);

                    $.post('@Url.Action("IncreaseBalance")', { amount: amount }, function () {
                        console.log("Increase Balance success");
                        // Update the balance dynamically
                        updateBalance();
                        // Clear the input field
                        $("#amountInput").val('');
                        // Hide the invalid amount message if shown
                        $("#invalidAmountMessage").hide();
                    });
                } else {
                    // Provide user feedback for invalid input on the page
                    $("#invalidAmountMessage").text("Please enter a valid positive amount.").show();
                }

            });

            function updateBalance() {
                // Retrieve the updated balance from the server and update the UI
                $.get('@Url.Action("Index", "Home")', function (data) {
                    $("#Balance").html($(data).find("#Balance").html());
                });
            }
            var numberOfExpensesByCategory = @Html.Raw(Json.Serialize(ViewBag.numberOfExpensesByCategory)) || [];
            var categoryLabels = numberOfExpensesByCategory.map(item => item.category);
            var CategoryCount = numberOfExpensesByCategory.map(item => item.count);
        
            var categoryCtx = document.getElementById('numberOfExpensesByCategory').getContext('2d');
            var catChart = new Chart(categoryCtx, {
                type: 'bar',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Number Of Expenses By Category',
                        data: CategoryCount,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(255, 206, 86, 0.5)',
                            'rgba(75, 192, 192, 0.5)',
                            'rgba(153, 102, 255, 0.5)',
                            'rgba(255, 159, 64, 0.5)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });

            var costOfExpensesByCategory = @Html.Raw(Json.Serialize(ViewBag.costOfExpensesByCategory)) || [];
            //var categoryLabels = costOfExpensesByCategory.map(item => item.category);
            var categoryAmounts = costOfExpensesByCategory.map(item => item.amount);
            var costCtx = document.getElementById('costOfExpensesByCategory').getContext('2d');
            var costChart = new Chart(costCtx, {
                type: 'bar',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Cost Of Expenses By Category',
                        data: categoryAmounts,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(255, 206, 86, 0.5)',
                            'rgba(75, 192, 192, 0.5)',
                            'rgba(153, 102, 255, 0.5)',
                            'rgba(255, 159, 64, 0.5)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });

            var expensesByWeek = @Html.Raw(Json.Serialize(ViewBag.expensesByWeek)) || [];

            expensesByWeek.sort((a, b) => a.week - b.week);

            var weekLabels = expensesByWeek.map(item => {
                var currentDate = new Date();
                var firstDayOfWeek = new Date(currentDate.setDate(currentDate.getDate() - currentDate.getDay() + (item.week - 1) * 7));
                var lastDayOfWeek = new Date(firstDayOfWeek);
                lastDayOfWeek.setDate(lastDayOfWeek.getDate() + 6);

                var startMonth = new Intl.DateTimeFormat('en-US', { month: 'short' }).format(firstDayOfWeek);
                var endMonth = new Intl.DateTimeFormat('en-US', { month: 'short' }).format(lastDayOfWeek);

                return `${startMonth} ${firstDayOfWeek.getDate()} - ${endMonth} ${lastDayOfWeek.getDate()}`;
            });
            console.log(weekLabels);

            var weekAmounts = expensesByWeek.map(item => item.amount);

            var weekCtx = document.getElementById('expensesByWeek').getContext('2d');
            var weekChart = new Chart(weekCtx, {
                type: 'bar',
                data: {
                    labels: weekLabels,
                    datasets: [{
                        label: 'Expenses By Week',
                        data: weekAmounts,
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.5)',
                            'rgba(54, 162, 235, 0.5)',
                            'rgba(255, 206, 86, 0.5)',
                            'rgba(75, 192, 192, 0.5)',
                            'rgba(153, 102, 255, 0.5)',
                            'rgba(255, 159, 64, 0.5)'
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true
                }
            });







            // Rest of your chart rendering code...
            
        });
    </script>
}
